# Spotify URL Fixer - Convert Search URLs to Track URLs for Iframe Embedding
# Script generated by perplexity. Saves the day!
# This script takes a JSON file with Spotify search URLs and converts them to proper track URLs

import json
import requests
import base64
import time
from typing import Dict, List, Optional

from dotenv import load_dotenv
import os



if not client_id or not client_secret:
    raise ValueError("Missing Spotify credentials")


class SpotifyURLFixer:
    """
    A class to fix Spotify URLs by converting search URLs to actual track URLs
    suitable for iframe embedding.
    """
    
    def __init__(self, client_id: str, client_secret: str):
        """
        Initialize the Spotify URL Fixer with API credentials.
        
        Args:
            client_id: Your Spotify app client ID
            client_secret: Your Spotify app client secret
        """
        self.client_id = client_id
        self.client_secret = client_secret
        self.access_token = None
        self.api_base_url = "https://api.spotify.com/v1"
        
    def get_access_token(self) -> str:
        """
        Get access token using Spotify Client Credentials flow.
        
        Returns:
            Access token string
        """
        print("Getting Spotify access token...")
        
        # Encode client credentials as base64
        credentials = f"{self.client_id}:{self.client_secret}"
        encoded_credentials = base64.b64encode(credentials.encode('ascii')).decode('ascii')
        
        # Prepare request
        url = "https://accounts.spotify.com/api/token"
        headers = {
            "Authorization": f"Basic {encoded_credentials}",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        data = {
            "grant_type": "client_credentials"
        }
        
        # Make request
        response = requests.post(url, headers=headers, data=data)
        
        if response.status_code == 200:
            token_data = response.json()
            self.access_token = token_data['access_token']
            print("✅ Successfully obtained access token")
            return self.access_token
        else:
            raise Exception(f"Failed to get access token: {response.status_code} - {response.text}")
    
    def search_track(self, title: str, artist: str) -> Optional[str]:
        """
        Search for a track and return its Spotify track ID.
        
        Args:
            title: Song title
            artist: Artist name
            
        Returns:
            Spotify track ID or None if not found
        """
        if not self.access_token:
            self.get_access_token()
        
        # Prepare search query
        query = f"track:\"{title}\" artist:\"{artist}\""
        
        # Prepare request
        url = f"{self.api_base_url}/search"
        headers = {
            "Authorization": f"Bearer {self.access_token}"
        }
        params = {
            "q": query,
            "type": "track",
            "limit": 1
        }
        
        # Make request
        response = requests.get(url, headers=headers, params=params)
        
        if response.status_code == 200:
            data = response.json()
            tracks = data.get('tracks', {}).get('items', [])
            
            if tracks:
                track_id = tracks[0]['id']
                print(f"✅ Found track: {title} by {artist} -> {track_id}")
                return track_id
            else:
                print(f"❌ No track found for: {title} by {artist}")
                return None
        else:
            print(f"❌ Search failed for {title} by {artist}: {response.status_code}")
            return None
    
    def create_embed_url(self, track_id: str) -> str:
        """
        Create an iframe embed URL from a track ID.
        
        Args:
            track_id: Spotify track ID
            
        Returns:
            Embed URL suitable for iframe
        """
        return f"https://open.spotify.com/embed/track/{track_id}"
    
    def fix_song_urls(self, songs: List[Dict]) -> List[Dict]:
        """
        Fix all song URLs in the provided songs list.
        
        Args:
            songs: List of song dictionaries
            
        Returns:
            Updated list with fixed URLs
        """
        fixed_songs = []
        total_songs = len(songs)
        
        print(f"Starting to fix URLs for {total_songs} songs...")
        
        for i, song in enumerate(songs, 1):
            print(f"\nProcessing song {i}/{total_songs}: {song['title']} by {song['artist']}")
            
            # Search for the track
            track_id = self.search_track(song['title'], song['artist'])
            
            if track_id:
                # Create embed URL
                embed_url = self.create_embed_url(track_id)
                
                # Update the song data
                updated_song = song.copy()
                updated_song['source_url'] = embed_url
                updated_song['track_id'] = track_id  # Add track ID for reference
                
                fixed_songs.append(updated_song)
                print(f"✅ Updated URL: {embed_url}")
            else:
                # Keep original URL if track not found
                fixed_songs.append(song)
                print(f"⚠️ Keeping original URL for: {song['title']}")
            
            # Rate limiting - be nice to Spotify's API
            time.sleep(0.1)
        
        return fixed_songs
    
    def process_json_file(self, input_file: str, output_file: str):
        """
        Process a JSON file with songs and fix all URLs.
        
        Args:
            input_file: Path to input JSON file
            output_file: Path to output JSON file
        """
        try:
            # Load the JSON data
            with open(input_file, 'r', encoding='utf-8') as f:
                songs = json.load(f)
            
            print(f"Loaded {len(songs)} songs from {input_file}")
            
            # Fix the URLs
            fixed_songs = self.fix_song_urls(songs)
            
            # Save the results
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(fixed_songs, f, indent=2, ensure_ascii=False)
            
            print(f"\n✅ Successfully saved fixed URLs to {output_file}")
            
            # Print summary
            successful_fixes = sum(1 for song in fixed_songs if 'track_id' in song)
            print(f"\nSummary:")
            print(f"Total songs: {len(songs)}")
            print(f"Successfully fixed: {successful_fixes}")
            print(f"Failed to fix: {len(songs) - successful_fixes}")
            
        except FileNotFoundError:
            print(f"❌ Error: File {input_file} not found")
        except json.JSONDecodeError:
            print(f"❌ Error: Invalid JSON in {input_file}")
        except Exception as e:
            print(f"❌ Error: {str(e)}")

def main():
    """
    Main function to demonstrate usage.
    You need to replace CLIENT_ID and CLIENT_SECRET with your actual Spotify app credentials.
    """
    
    # IMPORTANT: Replace these with your actual Spotify app credentials
    # Get them from: https://developer.spotify.com/dashboard
    # Load environment variables from .env file
    load_dotenv()

    # Access the variables safely
    CLIENT_ID = os.getenv('SPOTIFY_CLIENT_ID')
    CLIENT_SECRET = os.getenv('SPOTIFY_CLIENT_SECRET')
    
    if CLIENT_ID == "YOUR_SPOTIFY_CLIENT_ID" or CLIENT_SECRET == "YOUR_SPOTIFY_CLIENT_SECRET":
        print("❌ Error: Please replace CLIENT_ID and CLIENT_SECRET with your actual Spotify app credentials")
        print("Get them from: https://developer.spotify.com/dashboard")
        return
    
    # Initialize the URL fixer
    fixer = SpotifyURLFixer(CLIENT_ID, CLIENT_SECRET)
    
    # Process the file
    input_file = "songs_corrected.json"  # Your current file
    output_file = "songs_with_track_urls.json"  # Output file with fixed URLs
    
    fixer.process_json_file(input_file, output_file)

if __name__ == "__main__":
    main()